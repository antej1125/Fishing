#include "Common.h"


// AGraphics_Object
//------------------------------------------------------------------------------------------------------------
AGraphics_Object::~AGraphics_Object()
{
}
//------------------------------------------------------------------------------------------------------------



// AString
//------------------------------------------------------------------------------------------------------------
AString::AString()
{
}
//------------------------------------------------------------------------------------------------------------
AString::AString(const wchar_t *str)
	: Content(str)
{
}
//------------------------------------------------------------------------------------------------------------
void AString::Append(int value, int digits)
{
	wchar_t format[32];
	wchar_t buf[32];

	swprintf(format, 32, L"%%.%ii", digits);
	swprintf(buf, 32, format, value);

	Content += buf;
}
//------------------------------------------------------------------------------------------------------------
void AString::Append(wchar_t symbol)
{
	Content.append(1, symbol);
}
//------------------------------------------------------------------------------------------------------------
void AString::Delete_Last_Symbol()
{
	int len = Content.size();

	if (len > 0)
		Content.resize(len - 1);
}
//------------------------------------------------------------------------------------------------------------
const wchar_t *AString::Get_Content()
{
	return Content.c_str();
}
//------------------------------------------------------------------------------------------------------------
int AString::Get_Length()
{
	return Content.length();
}
//------------------------------------------------------------------------------------------------------------
void AString::Clear()
{
	Content = L"";
}
//------------------------------------------------------------------------------------------------------------




// AMessage
//------------------------------------------------------------------------------------------------------------
AMessage::AMessage(EMessage_Type message_type)
	: Message_Type(message_type)
{
}
//------------------------------------------------------------------------------------------------------------




// AsMessage_Manager
std::queue<AMessage *> AsMessage_Manager::Messages_Queue;
//------------------------------------------------------------------------------------------------------------
void AsMessage_Manager::Add_Message(AMessage *message)
{
	Messages_Queue.push(message);
}
//------------------------------------------------------------------------------------------------------------
bool AsMessage_Manager::Get_Message(AMessage **message)
{
	if (Messages_Queue.size() == 0)
		return false;

	*message = Messages_Queue.front();

	Messages_Queue.pop();

	return true;
}
//------------------------------------------------------------------------------------------------------------
